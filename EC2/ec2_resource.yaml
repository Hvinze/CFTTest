AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a EC2 single instance"

Parameters:
  VPC:
    Type: String
    Description: The VPC identity

  SubnetA:
    Type: String
    Description: The subnet where to launch the service

  SubnetB:
    Type: String
    Description: The subnet where to launch the service

  EC2SecurityGroup:
    Type: String
    Description: Security group for mount target

  Ec2InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  Name:
    Type: String
    Description: Name of the instance

  component:
    Type: String
    Description: Tag used for billing and tracking

Mappings:
    RegionToAmazonAMI:
        us-east-1:
            HVM64: ami-026b57f3c383c2eec
        us-east-2:
            HVM64: ami-0f924dc71d44d23e2
        us-west-1:
            HVM64: ami-09208e69ff3feb1db
        us-west-2:
            HVM64: ami-08e2d37b6a0129927

Resources:
    # ELB Security Group allowing Port 80 from anywhere
    ELBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH and Port 80'
            VpcId:
              !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    # Linux Instance with Apache running on Port 80
    MyEc2Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap: 
              - "RegionToAmazonAMI"
              - !Ref "AWS::Region"
              - "HVM64"

        InstanceInitiatedShutdownBehavior: stop
        InstanceType: !Ref Ec2InstanceType
        Monitoring: true
#        NetworkInterfaces:
#        - AssociatePublicIpAddress: 'true'
#          DeviceIndex: "0"
        SubnetId:
          !Ref SubnetA
        Tenancy: default
        Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Component
          Value: !Ref component

    # Target Group
    EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        Targets:
        - Id:
            !Ref MyEc2Instance
          Port: 80
        UnhealthyThresholdCount: 3
        VpcId:
          !Ref VPC
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80

    #ELB (ALB)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              !Ref EC2TargetGroup
        LoadBalancerArn:
            !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets:
        - !Ref  SubnetA
        - !Ref  SubnetB
        SecurityGroups:
        - !Ref ELBSecurityGroup

  
