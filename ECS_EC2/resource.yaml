AWSTemplateFormatVersion: 2010-09-09
Parameters:

  vpcId:
    Type: String
    Description: VPC Id

  ClusterName:
    Type: String
    Description: Name of the cluster
  Name1:
    Type: String
    Description: Name of the ECS resource1
  Name2:
    Type: String
    Description: Name of the ECS resource2
  Name3:
    Type: String
    Description: Name of the ECS resource3
   
  component:
    Type: String
    Description: Tag used for cost tracking and billing
  
  TaskDefinitionName:
    Type: String
    Description: Name of the Task definition


  ContainerDefinitionsMountPointsContainerPath:
    Type: String
    Description: The path on the container to mount the host volume at.
  ContainerDefinitionsMountPointsSourceVolume:
    Type: String
    Description: The name of the volume to mount
  ContainerDefinitionsImage:
    Type: String
    Description: The image used to start a container
  LogConfigurationLogDriver:
    Type: String
    Description: The log driver to use for the container.  
  LogConfigurationOptionsawslogsregion:
    Type: String
    Description: The log configuration specification for the container
  LogConfigurationOptionsawslogsstreamprefix:
    Type: String
    Description: The log configuration specification for the container
  ContainerDefinitionsPortMappingsContainerPort:
    Type: String
    Description: The port number on the container that's bound to the user-specified or automatically assigned host port.
  ContainerDefinitionsPortMappingsProtocol:
    Type: String
    Description: The protocol used for the port mapping.
  ContainerDefinitionsPortMappingsHostPort:
    Type: String
    Description: The port number on the container instance to reserve for your container.
  Cpu:
    Type: String
    Description: CPU configuration
  ExecutionRoleArn:
    Type: String
    Description: The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf.
  Family:
    Type: String
    Description: The name of a family that this task definition is registered to.
  Memory:
    Type: String
    Description: The amount (in MiB) of memory used by the task.
  NetworkMode:
    Type: String
    Description: The Docker networking mode to use for the containers in the task.
  RequiresCompatibilities:
    Type: String
    Description: The task launch types the task definition was validated against.
  TaskRoleArn:
    Type: String
    Description: The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management role that grants containers in the task permission to call AWS APIs on your behalf.
  FilesystemId:
    Type: String
    Description: The Amazon EFS file system ID to use.  
  # VolumesName:
  #   Type: String
  #   Description: Creates a multi-Region primary key
  VolumesEFSVolumeConfigurationRootDirectory:
    Type: String
    Description: The directory within the Amazon EFS file system to mount as the root directory inside the host.
  # VolumesEFSVolumeConfigurationTransitEncryption:
  #   Type: String
  #   Description: Creates a multi-Region primary key
  # VolumesEFSVolumeConfigurationAuthorizationConfigIAM:
  #   Type: String
  #   Description: Creates a multi-Region primary key
  
  # DeploymentConfigurationMaximumPercent:
  #   Type: String
  #   Description: Name of the ECS resource1
  # DeploymentConfigurationMinimumHealthyPercent:
  #   Type: String
  #   Description: Name of the ECS resource1

  ########### service ##################################

  DeploymentControllerType:
    Type: String
    Description: The deployment controller type to use.
  EnableECSManagedTags:
    Type: String
    Description: Specifies whether to turn on Amazon ECS managed tags for the tasks within the service.
  # HealthCheckGracePeriodSeconds:
  #   Type: String
  #   Description: Health Check period
  LaunchType:
    Type: String
    Description: The launch type on which to run your service.
  DesiredCount:
    Type: String
    Description: The number of instantiations of the specified task definition to place and keep running on your cluster.

  LoadBalancersContainerName:
    Type: String
    Description: The name of the container (as it appears in a container definition) to associate with the load balancer.
  LoadBalancersContainerPort:
    Type: String
    Description: The port on the container to associate with the load balancer.
  # NetworkConfigurationAwsvpcConfigurationAssignPublicIp:
  #   Type: String
  #   Description: Name of the ECS resource1
  # NetworkConfigurationAwsvpcConfigurationSG1:
  #   Type: String
  #   Description: Name of the ECS resource1
  # NetworkConfigurationAwsvpcConfigurationSG2:
  #   Type: String
  #   Description: Name of the ECS resource1
  # NetworkConfigurationAwsvpcConfigurationSubnet1:
  #   Type: String
  #   Description: Name of the ECS resource1
  # NetworkConfigurationAwsvpcConfigurationSubnet2:
  #   Type: String
  #   Description: Name of the ECS resource1

  ########### Target Group #######################################

  TargetGroupHealthCheckEnabled:
    Type: String
    Description: Indicates whether health checks are enabled.
  TargetGroupHealthCheckIntervalSeconds:
    Type: String
    Description: The approximate amount of time, in seconds, between health checks of an individual target.
  TargetGroupHealthCheckPath:
    Type: String
    Description: The destination for health checks on the targets.
  TargetGroupHealthCheckProtocol:
    Type: String
    Description: The protocol the load balancer uses when performing health checks on targets.
  TargetGroupHealthCheckTimeoutSeconds:
    Type: String
    Description: The amount of time, in seconds, during which no response from a target means a failed health check.
  TargetGroup1Name:
    Type: String
    Description: Name of the target group1
  TargetGroup2Name:
    Type: String
    Description: Name of the target group1
  TargetGroup1Port:
    Type: String
    Description: target group1 port
  TargetGroup2Port:
    Type: String
    Description: target group2 port
  TargetGroupProtocol:
    Type: String
    Description: target group protocol
  TargetGroupTargetType:
    Type: String
    Description: type of the target group
  TargetGroupUnhealthyThresholdCount:
    Type: String
    Description: The number of consecutive health check failures required before considering a target unhealthy.
  TargetGroupHealthyThresholdCount:
    Type: String
    Description: The number of consecutive health checks successes required before considering an unhealthy target healthy. 

  ############ Listener ###########################

  ListenersPort1:
    Type: String
    Description: Listener port primary

  ListenersPort2:
    Type: String
    Description: Listener port for testing

  ListenersProtocol:
    Type: String
    Description: Listener Protocol

  ############################################

  #Load Balancer
 
  LoadBalancerScheme:
    Type: String
    Description: Scheme used by the load balancer
  PublicSubnet0:
    Type: String
    Description: Public subnet0 id
  PublicSubnet1:
    Type: String
    Description: Public subnet1 id
  PrivateSubnet0:
    Type: String
    Description: Private subnet0 id
  PrivateSubnet1:
    Type: String
    Description: Private subnet1 id
  LoadBalancerType:
    Type: String
    Description: type of the loadbalancer

  ############################################

  ServiceName:
    Type: String
    Description: Name of the ECS Service
  # ELBListenerARN:
  #   Type: String
  #   Description: Name of the ECS resource1
  # ELBTestListenerARN:
  #   Type: String
  #   Description: Name of the ECS resource1
  # ELBTargetGroupTG1Name:
  #   Type: String
  #   Description: Name of the ECS resource1
  # ELBTargetGroupTG2Name:
  #   Type: String
  #   Description: Name of the ECS resource1
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: Please choose a valid instance type.
    
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-09bee01cc997a78a6
    us-east-2:
      AMIID: ami-0a9e12068cb98a01d
    us-west-1:
      AMIID: ami-0fa6c8d131a220017
    us-west-2:
      AMIID: ami-069acfe015e16939a
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
    ap-northeast-1:
      AMIID: ami-02265963d1614d04d
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c
    ap-southeast-2:
      AMIID: ami-00e4b147599c13588

Resources:
### Security group for ALB instanse ###############
  EcsSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Empty Security Group  
      VpcId: !Ref vpcId

  EcsSecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for ALB
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
        
        - IpProtocol: tcp
          FromPort: 90
          ToPort: 90
          CidrIp: 0.0.0.0/0

### Security group for EC2 #################

  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS EMPTY Security Group
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0

  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EcsSecurityGroup1

  EcsSecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup  

    
  # EcsSecurityGroupHTTPinbound:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Properties:
  #     GroupId: !Ref EcsSecurityGroup
  #     IpProtocol: -1
  #     # FromPort: 0
  #     # ToPort: 65535
  #     CidrIp: !Ref EcsSecurityGroup2

  # EcsSecurityGroupSSHinbound:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Properties:
  #     GroupId: !Ref EcsSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: 80
  #     ToPort: 80
  #     CidrIp: 0.0.0.0/0   

  # EcsSecurityGroupHTTPinbound:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Properties:
  #     GroupId: !Ref EcsSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: 9090
  #     ToPort: 9090
  #     CidrIp: 0.0.0.0/0   
    

  # EcsSecurityGroupSSHinbound:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Properties:
  #     GroupId: !Ref EcsSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: 22
  #     ToPort: 22
  #     CidrIp: 0.0.0.0/0
  

  # EcsSecurityGroupALBports:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Properties:
  #     GroupId: !Ref EcsSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: 31000
  #     ToPort: 61000
  #     SourceSecurityGroupId: !Ref EcsSecurityGroup

  ContainerInstances:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      SecurityGroups:
        - !Ref EcsSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: "myecskeypair26"
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - echo ECS_CLUSTER=
            - JD-SME-Cluster-EC21
            - |2
               >> /etc/ecs/ecs.config
            - |
              yum install -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ECSAutoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  ECSAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        #- "subnet-f8f129a3"
        #- "subnet-86229fad"
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      NewInstancesProtectedFromScaleIn: false
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT15M
    # UpdatePolicy:
    #   AutoScalingReplacingUpdate:
    #     WillReplace: 'true'
  
  # 'ECSScalableTarget':
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MaxCapacity: "5"
  #     MinCapacity: "2"  
  #     RoleARN: 
  #       Fn::Sub: "arn:aws:iam::847370586410:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
  #     ServiceNamespace: ecs
  #     ScalableDimension: 'ecs:service:DesiredCount'
  #     ResourceId: !Join 
  #       - /
  #       - - service
  #         - !Ref ECSCluster
  #         - !GetAtt ECSService.Name

  # 'ServiceScalingPolicyALB':
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: alb-requests-per-target-per-minute
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ECSScalableTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       TargetValue: "75"
  #       ScaleInCooldown: "60"
  #       ScaleOutCooldown: "30"
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ALBRequestCountPerTarget
  #         ResourceLabel: !Join 
  #           - '/' 
  #           - - !GetAtt MyECSLoadBalancer.LoadBalancerFullName
  #             - !GetAtt MyECSTargetGroup.TargetGroupFullName
  
  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    DependsOn:
      - ECSAutoScalingGroup
    Properties:
      Name: myECSCapacityProvider12
      AutoScalingGroupProvider:
          AutoScalingGroupArn: !Ref ECSAutoScalingGroup
          ManagedScaling:
            MaximumScalingStepSize: 1
            MinimumScalingStepSize: 1
            Status: ENABLED
            TargetCapacity: 99
          ManagedTerminationProtection: DISABLED
      # Tags:
      #   - Key: component  
      #     Value: !Ref BillingTag

  'ECSCluster':
    Type: AWS::ECS::Cluster
    # DependsOn:
    #   - ECSCapacityProvider
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - !Ref ECSCapacityProvider
      # ClusterSettings:
      #   - Name: containerInsights
      #     Value: enabled
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1
      Tags:
      - Key: component
        Value: !Ref component
      - Key: Name1
        Value: !Ref Name1
  
  'ECSTaskDefinition':
    Type: AWS::ECS::TaskDefinition
    Properties:

      ContainerDefinitions:
        - Essential: true
          MountPoints:
          - ContainerPath: !Ref ContainerDefinitionsMountPointsContainerPath
            SourceVolume: !Ref ContainerDefinitionsMountPointsSourceVolume
          Image: !Ref ContainerDefinitionsImage
          
          LogConfiguration:
            LogDriver: !Ref LogConfigurationLogDriver
            Options:
              awslogs-group: 'ecs-stack-devl-LogsLogGroupName'
              awslogs-region: !Ref LogConfigurationOptionsawslogsregion
              awslogs-stream-prefix: !Ref LogConfigurationOptionsawslogsstreamprefix
          Name: !Ref TaskDefinitionName
          PortMappings:
          - ContainerPort: !Ref ContainerDefinitionsPortMappingsContainerPort
            Protocol: !Ref ContainerDefinitionsPortMappingsProtocol
            HostPort: !Ref ContainerDefinitionsPortMappingsHostPort
          Environment:
          - Name: JAVA_OPTS
            Value: 'JAVA_OPTS'

      Cpu: !Ref Cpu
      ExecutionRoleArn: !Ref ExecutionRoleArn
      Family: !Ref Family
      Memory: !Ref Memory
      NetworkMode: !Ref NetworkMode
      RequiresCompatibilities:
      - !Ref RequiresCompatibilities
      Tags:
      - Key: component
        Value: !Ref component
      - Key: Name2
        Value: !Ref Name2
      TaskRoleArn: !Ref TaskRoleArn
      Volumes:
      - Name: shared-efs-volume
        EFSVolumeConfiguration:
          FilesystemId: !Ref FilesystemId
          RootDirectory: !Ref VolumesEFSVolumeConfigurationRootDirectory
    
  'MyECSLoadBalancer':
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: ECSALB
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups: 
        - !Ref EcsSecurityGroup2
        - !Ref EcsSecurityGroup1
      Subnets: 
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      Type: !Ref LoadBalancerType

  'MyECSTargetGroup':
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: !Ref TargetGroupHealthCheckEnabled
      HealthCheckIntervalSeconds: !Ref TargetGroupHealthCheckIntervalSeconds
      HealthCheckPath: !Ref TargetGroupHealthCheckPath
      HealthCheckProtocol: !Ref TargetGroupHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref TargetGroupHealthCheckTimeoutSeconds
      Name: !Ref TargetGroup1Name
      Port: !Ref TargetGroup1Port
      Protocol: !Ref TargetGroupProtocol
      TargetType: !Ref TargetGroupTargetType
      UnhealthyThresholdCount: !Ref TargetGroupUnhealthyThresholdCount
      HealthyThresholdCount: !Ref TargetGroupHealthyThresholdCount
      VpcId: !Ref vpcId

  'MyECSTargetGroup2':
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: !Ref TargetGroupHealthCheckEnabled
      HealthCheckIntervalSeconds: !Ref TargetGroupHealthCheckIntervalSeconds
      HealthCheckPath: !Ref TargetGroupHealthCheckPath
      HealthCheckProtocol: !Ref TargetGroupHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref TargetGroupHealthCheckTimeoutSeconds
      Name: !Ref TargetGroup2Name
      Port: !Ref TargetGroup2Port
      Protocol: !Ref TargetGroupProtocol
      TargetType: !Ref TargetGroupTargetType
      UnhealthyThresholdCount: !Ref TargetGroupUnhealthyThresholdCount
      HealthyThresholdCount: !Ref TargetGroupHealthyThresholdCount
      VpcId: !Ref vpcId
    

  'MyECSListeners':
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "forward"
          TargetGroupArn: !Ref MyECSTargetGroup
      LoadBalancerArn: 
        Ref: "MyECSLoadBalancer"
      Port: !Ref ListenersPort1
      Protocol: !Ref ListenersProtocol

  'MyECSListeners2':
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "forward"
          TargetGroupArn: !Ref MyECSTargetGroup2
      LoadBalancerArn: 
        Ref: "MyECSLoadBalancer"
      Port: !Ref ListenersPort2
      Protocol: !Ref ListenersProtocol
    

  'ECSALBListenerRule':
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: MyECSListeners
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyECSTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref MyECSListeners
      Priority: 1

  'ECSService':
    Type: AWS::ECS::Service
    DependsOn: MyECSListeners
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentController:
        Type: !Ref DeploymentControllerType
      
      EnableECSManagedTags: false
      LaunchType: !Ref LaunchType
      DesiredCount: !Ref DesiredCount  
      
      LoadBalancers:
      - ContainerName: !Ref LoadBalancersContainerName
        ContainerPort: !Ref LoadBalancersContainerPort
        TargetGroupArn: !Ref 'MyECSTargetGroup'
      
      ServiceName: !Ref ServiceName
      Tags:
      - Key: component
        Value: !Ref component
      - Key: Name3
        Value: !Ref Name3
      
      TaskDefinition:
        Ref: 'ECSTaskDefinition'

  'EC2Role':
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /     
      ManagedPolicyArns:         
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role      